# Stage 1: Build - Restores dependencies, builds projects, and publishes the web application.
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# Copy solution file first to allow Docker to cache dotnet restore
COPY CardValidation.sln .

# Copy all project files individually to leverage Docker caching for restore
COPY CardValidation.Core/CardValidation.Core.csproj CardValidation.Core/
COPY CardValidation.Tests/CardValidation.Tests.csproj CardValidation.Tests/
COPY CardValidation.Web/CardValidation.Web.csproj CardValidation.Web/

# Restore NuGet package dependencies for the entire solution
# This step is highly cacheable if only .csproj files or .sln change
RUN dotnet restore CardValidation.sln

# Copy the rest of the source code
COPY . .

# Publish the web application in Release configuration to a directory named /app/publish
RUN dotnet publish CardValidation.Web/CardValidation.Web.csproj -c Release -o /app/publish

# Stage 2: Test - Runs unit tests and collects code coverage.
# This stage uses the 'build' stage as its base to have access to restored projects
FROM build AS test
WORKDIR /src

# Run tests with code coverage enabled using Coverlet
# --logger "trx;LogFileName=all-tests.trx": Outputs test results in TRX format to all-tests.trx
# --results-directory /app/test-results: Specifies the output directory for test results and coverage
# /p:CollectCoverage=true: Activates code coverage collection via Coverlet
# /p:CoverletOutputFormat=cobertura: Sets the output format for the coverage report (Cobertura XML)
# /p:CoverletOutput=/app/test-results/coverage.xml: Defines the path and filename for the coverage report
# /p:CoverletVerbosity=detailed: Increases Coverlet's logging verbosity for detailed debugging
# || true: Ensures the Docker build does not fail if tests themselves fail, allowing debug logs to be collected
RUN dotnet test CardValidation.Tests/CardValidation.Tests.csproj \
    --logger "trx;LogFileName=all-tests.trx" \
    --results-directory /app/test-results \
    /p:CollectCoverage=true \
    /p:CoverletOutputFormat=cobertura \
    /p:CoverletOutput=/app/test-results/coverage.xml \
    /p:CoverletVerbosity=detailed || true

# --- IMPORTANT DEBUG STEP: List contents of test-results immediately after tests ---
# This command runs inside the Docker build process and prints the contents of the
# /app/test-results directory. This is crucial for verifying if coverage.xml is created.
RUN echo "--- Contents of /app/test-results inside the container after dotnet test: ---" && \
    ls -la /app/test-results && \
    echo "-----------------------------------------------------------------------"

# Copy Allure results if the directory exists (for Allure.NUnit or similar integrations)
# This assumes allure-results might be generated by tests directly into CardValidation.Tests/allure-results
RUN if [ -d "CardValidation.Tests/allure-results" ]; then \
      cp -r CardValidation.Tests/allure-results /app/allure-results; \
    fi

# Stage 3: Runtime - Creates a lightweight image for running the published web application.
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS final
WORKDIR /app

# Copy the published application files from the 'build' stage
COPY --from=build /app/publish .

# Expose the port on which the ASP.NET Core application listens
EXPOSE 8080

# Define the entry point command to run the application when the container starts
ENTRYPOINT ["dotnet", "CardValidation.Web.dll"]
