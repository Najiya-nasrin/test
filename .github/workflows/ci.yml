name: CI Pipeline

# When to run this pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Run tests with TestHost (no external API needed)
  test:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Get your code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Step 2: Install .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'  # Change to your .NET version
    
    # Step 3: Restore NuGet packages
    - name: Restore dependencies
      run: dotnet restore CardValidation.sln
    
    # Step 4: Build the solution
    - name: Build solution
      run: dotnet build CardValidation.sln --configuration Release --no-restore
    
    # Step 5: Run all tests (Unit + Integration with TestHost)
    - name: Run Tests with TestHost
      run: |
        dotnet test CardValidation.Tests/CardValidation.Tests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx \
          --results-directory TestResults \
          --collect:"XPlat Code Coverage"
      env:
        ASPNETCORE_ENVIRONMENT: Testing
    
    # Step 6: Install Allure CLI
    - name: Install Allure CLI
      run: |
        # Install Java (required for Allure)
        sudo apt-get update
        sudo apt-get install -y openjdk-11-jre-headless
        
        # Download and install Allure
        wget -O allure.tgz https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
        tar -xzf allure.tgz
        sudo mv allure-2.24.0 /opt/allure
        sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure
        
        # Verify installation
        allure --version
    
    # Step 7: Generate Allure Report
    - name: Generate Allure Report
      run: |
        echo "Checking for allure-results in test project directory..."
        ls -la CardValidation.Tests/
        
        if [ -d "CardValidation.Tests/allure-results" ]; then
          echo "Found allure-results in CardValidation.Tests:"
          ls -la CardValidation.Tests/allure-results/
          
          # Generate report from the test project's allure-results
          allure generate CardValidation.Tests/allure-results --clean -o allure-report
          echo "Allure report generated successfully!"
          ls -la allure-report/
          
        elif [ -d "CardValidation.Tests/bin/Debug/net8.0/allure-results" ]; then
          echo "Found allure-results in bin directory:"
          ls -la CardValidation.Tests/bin/Debug/net8.0/allure-results/
          
          # Generate report from the bin directory
          allure generate CardValidation.Tests/bin/Debug/net8.0/allure-results --clean -o allure-report
          echo "Allure report generated successfully!"
          ls -la allure-report/
          
        elif [ -d "CardValidation.Tests/bin/Release/net8.0/allure-results" ]; then
          echo "Found allure-results in release bin directory:"
          ls -la CardValidation.Tests/bin/Release/net8.0/allure-results/
          
          # Generate report from the release bin directory
          allure generate CardValidation.Tests/bin/Release/net8.0/allure-results --clean -o allure-report
          echo "Allure report generated successfully!"
          ls -la allure-report/
          
        else
          echo "Searching for allure-results in all subdirectories..."
          find . -name "allure-results" -type d
          
          # Try to find any allure-results directory
          ALLURE_DIR=$(find . -name "allure-results" -type d | head -1)
          if [ -n "$ALLURE_DIR" ]; then
            echo "Found allure-results at: $ALLURE_DIR"
            ls -la "$ALLURE_DIR/"
            allure generate "$ALLURE_DIR" --clean -o allure-report
            echo "Allure report generated successfully!"
          else
            echo "No allure-results directory found anywhere. Creating empty report..."
            mkdir -p allure-results
            echo '{"name": "No tests found", "status": "broken"}' > allure-results/empty-test-result.json
            allure generate allure-results --clean -o allure-report
          fi
        fi
    
    # Step 8: Upload test results and Allure report
    - name: Upload test results and Allure report
      uses: actions/upload-artifact@v4
      if: always()  # Upload even if tests fail
      with:
        name: test-results-and-allure-report
        path: |
          TestResults/
          CardValidation.Tests/allure-results/
          CardValidation.Tests/bin/**/allure-results/
          allure-report/
    
    # Step 9: Upload code coverage (optional)
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        directory: TestResults
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Job 2: Build and push Docker image (only runs if tests pass)
  docker-build:
    needs: test  # This job waits for 'test' job to complete successfully
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Get your code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Step 2: Login to Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    # Step 3: Build Docker image
    - name: Build Docker image
      run: |
        docker build -t najiya123/cardvalidation-app:latest .
        docker build -t najiya123/cardvalidation-app:${{ github.sha }} .
    
    # Step 4: Push Docker image
    - name: Push Docker image
      run: |
        docker push najiya123/cardvalidation-app:latest
        docker push najiya123/cardvalidation-app:${{ github.sha }}