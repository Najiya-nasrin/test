name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: card-validation-app
  ALLURE_HISTORY_PATH: allure-history

jobs:
  test:
    runs-on: ubuntu-latest
    name: Build and Test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Prepare unified-reports directory early and ensure it's clean for all artifacts
    - name: Prepare unified reports directory
      run: |
        rm -rf unified-reports # Clean up any previous runs
        mkdir -p unified-reports
        echo "Created unified-reports directory."
        ls -la unified-reports/ # Verify it's created and empty

    - name: Build test image (runs tests in Dockerfile)
      run: |
        docker build --target test -t card-validation-tests .

    - name: Extract test results from test container image
      run: |
        docker create --name test-runner card-validation-tests

        # DEBUG: Verify contents INSIDE the Docker container BEFORE copying
        echo "--- Contents of /app/test-results inside the Docker container: ---"
        docker exec test-runner ls -la /app/test-results || echo "  /app/test-results not found or empty in container."
        echo "---------------------------------------------------------------------"

        # Copy test results (including coverage.xml/cobertura.xml and all-tests.trx) from container to runner
        # This will create ./test-results on the runner
        docker cp test-runner:/app/test-results ./test-results || echo "Failed to copy test-results from container. Source might be empty or missing."

        # Copy Allure results
        docker cp test-runner:/app/allure-results ./allure-results || echo "Failed to copy allure-results from container. Source might be empty or missing."

        docker rm test-runner

        # DEBUG: Verify contents on the RUNNER AFTER copying
        echo "--- Contents of ./test-results on the GitHub Actions runner: ---"
        ls -la ./test-results || echo "  ./test-results not found or empty on runner."
        ls -la ./test-results/*/ || echo "  No subdirectories found in ./test-results on runner." # Check for nested results
        echo "---------------------------------------------------------------------"

    - name: Install ReportGenerator
      if: always()
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH # Add tools to PATH for subsequent steps

    - name: Generate HTML Coverage Report
      if: always()
      run: |
        # Use the glob pattern from your previous successful run
        if find test-results -name "coverage.cobertura.xml" -type f | grep -q .; then
          echo "Generating coverage report from test-results"
          reportgenerator \
            "-reports:test-results/*/coverage.cobertura.xml" \
            "-targetdir:unified-reports/coverage-report" \
            "-reporttypes:Html;JsonSummary" \
            "-sourcedirs:./CardValidation.Core;./CardValidation.Web" \ # <--- CRITICAL ADDITION!
            -verbosity:Warning
          echo "✅ HTML Coverage report generated successfully in unified-reports/coverage-report"

          if [ -f "unified-reports/coverage-report/Summary.json" ]; then
            echo "📊 Coverage Summary:"
            cat unified-reports/coverage-report/Summary.json
          fi
        else
          echo "⚠️ No coverage files (coverage.cobertura.xml) found in test-results/ subdirectories."
          echo "Please ensure Coverlet is generating them correctly in the Dockerfile and they are copied."
          # Create a placeholder HTML file if no coverage is found
          mkdir -p unified-reports/coverage-report
          echo "<html><body><h1>No Coverage Data Found</h1><p>Coverage data was not generated during test execution, or the expected XML file was not found.</p></body></html>" > unified-reports/coverage-report/index.html
        fi

    - name: Load Allure Report history (safe)
      if: always()
      run: |
        git clone --depth 1 --branch gh-pages https://github.com/${{ github.repository }} gh-pages || echo "No gh-pages branch yet"
        rm -rf gh-pages/.git

    - name: Build Allure Report
      uses: simple-elf/allure-report-action@v1.7
      if: always()
      with:
        gh_pages: gh-pages
        allure_history: ${{ env.ALLURE_HISTORY_PATH }}
        allure_results: allure-results

    - name: Publish Allure Report
      uses: peaceiris/actions-gh-pages@v3
      if: always()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages
        publish_dir: ${{ env.ALLURE_HISTORY_PATH }}

    - name: Upload Allure Report Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: ${{ env.ALLURE_HISTORY_PATH }}

    - name: Prepare unified reports (for other artifacts)
      if: always()
      run: |
        # Copy TRX file to unified-reports (unified-reports is already created in a previous step)
        if [ -f "test-results/all-tests.trx" ]; then
          cp "test-results/all-tests.trx" "unified-reports/" # Copy into the already existing directory
          echo "Test results (TRX) copied to unified-reports"
        else
          echo "TRX file (all-tests.trx) not found in test-results/."
        fi

        echo "=== Final Unified Reports Structure ==="
        ls -la unified-reports/ || echo "Unified reports directory is empty"
        ls -la unified-reports/coverage-report/ || echo "Unified reports coverage-report directory is empty."


    - name: Upload unified test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: other-test-reports
        path: unified-reports/ # This now uploads the HTML report and TRX
        if-no-files-found: warn

    - name: Build production image
      if: success()
      run: |
        docker build --target final -t ${{ env.DOCKER_IMAGE_NAME }} .

    - name: Login to Docker Hub
      if: success() && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push to Docker Hub
      if: success() && github.ref == 'refs/heads/main'
      run: |
        docker tag ${{ env.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        docker tag ${{ env.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
