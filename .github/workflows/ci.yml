name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: card-validation-app

jobs:
  test:
    runs-on: ubuntu-latest
    name: Build and Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build test image
      run: |
        docker build --target test -t card-validation-tests .
        
    - name: Extract test results
      if: always()
      run: |
        # Create container and copy test results
        docker create --name test-container card-validation-tests
        docker cp test-container:/app/test-results ./test-results || echo "No test-results found"
        docker cp test-container:/app/allure-results ./allure-results || echo "No allure-results found"
        docker rm test-container
        
        # List all results for debugging
        echo "=== Test Results Directory ==="
        ls -la test-results/ || echo "Test results directory not found"
        
        echo "=== Allure Results Directory ==="
        ls -la allure-results/ || echo "Allure results directory not found"
        
        echo "=== Coverage Reports ==="
        ls -la test-results/CoverageReport/ || echo "Coverage report directory not found"
        
    - name: Display test summary
      if: always()
      run: |
        echo "=== Test Execution Summary ==="
        if [ -f "test-results/all-tests.trx" ]; then
          echo "✅ All tests completed - TRX file found"
        else
          echo "❌ Test results (TRX) not found"
        fi
        
        echo "=== Coverage Report ==="
        if [ -d "test-results/CoverageReport" ]; then
          echo "✅ Coverage report generated successfully"
          ls -la test-results/CoverageReport/ | head -5
        else
          echo "❌ Coverage report not found"
        fi
        
        echo "=== Allure Report ==="
        if [ -d "test-results/allure-report" ]; then
          echo "✅ Allure report generated successfully"
          ls -la test-results/allure-report/ | head -5
        else
          echo "❌ Allure report not found"
        fi
        
        echo "=== Raw Allure Results ==="
        if [ -d "allure-results" ]; then
          echo "✅ Allure raw results found"
          ls -la allure-results/ | head -5
        else
          echo "❌ Allure raw results not found"
        fi
        
    - name: Upload test results and coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-and-coverage
        path: |
          test-results/
          allure-results/
        if-no-files-found: warn
        
    - name: Upload Coverage Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: test-results/CoverageReport/
        if-no-files-found: warn
        
    - name: Upload Allure Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: test-results/allure-report/
        if-no-files-found: warn
        
    - name: Upload Raw Allure Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-raw-results
        path: allure-results/
        if-no-files-found: warn
        
    - name: Build production image
      if: success()
      run: |
        docker build --target runtime -t ${{ env.DOCKER_IMAGE_NAME }} .
        
    - name: Login to Docker Hub
      if: success() && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Push to Docker Hub
      if: success() && github.ref == 'refs/heads/main'
      run: |
        docker tag ${{ env.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        docker tag ${{ env.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}