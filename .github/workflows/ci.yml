name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: card-validation-app
  ALLURE_HISTORY_PATH: allure-history

jobs:
  test:
    runs-on: ubuntu-latest
    name: Build and Test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image (runs tests in Dockerfile)
      run: |
        docker build --target test -t card-validation-tests .

    - name: Extract test results from test container image
      run: |
        # Create a temporary container from the test image
        docker create --name test-runner card-validation-tests
        # Copy test results (including coverage.xml and all-tests.trx)
        docker cp test-runner:/app/test-results ./test-results || echo "No test-results found"
        # Copy Allure results
        docker cp test-runner:/app/allure-results ./allure-results || echo "No allure-results found"
        # Clean up the temporary container
        docker rm test-runner

    - name: Install ReportGenerator
      if: always()
      run: |
        # Install the .NET global tool for ReportGenerator
        dotnet tool install -g dotnet-reportgenerator-globaltool
        # Add the dotnet tools directory to the PATH for subsequent steps
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

    - name: Generate coverage report
      run: |        
        # Look for 'coverage.xml' directly
        if [ -f "test-results/coverage.xml" ]; then
          reportgenerator \
            -reports:"test-results/coverage.xml" \
            -targetdir:"test-results/coverage-report" \
            -reporttypes:"Html;JsonSummary" \
            -verbosity:Warning
          echo "Coverage report generated successfully"
          
          if [ -f "test-results/coverage-report/Summary.json" ]; then
            echo "Coverage Summary:"
            cat test-results/coverage-report/Summary.json
          fi
        else
          echo "No coverage files (coverage.xml) found in test-results/."
          echo "Contents of test-results/:"
          ls -la test-results/ || echo "  test-results directory not found or empty."
        fi

    - name: Load Allure Report history (safe)
      if: always()
      run: |
        # Clone gh-pages branch to get previous Allure history
        git clone --depth 1 --branch gh-pages https://github.com/${{ github.repository }} gh-pages || echo "No gh-pages branch yet"
        # Remove .git folder to avoid issues with simple-elf/allure-report-action
        rm -rf gh-pages/.git

    - name: Build Allure Report
      uses: simple-elf/allure-report-action@v1.7
      if: always()
      with:
        gh_pages: gh-pages
        allure_history: ${{ env.ALLURE_HISTORY_PATH }}
        allure_results: allure-results

    - name: Publish Allure Report
      uses: peaceiris/actions-gh-pages@v3
      if: always()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages
        publish_dir: ${{ env.ALLURE_HISTORY_PATH }}

    - name: Upload Allure Report Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: ${{ env.ALLURE_HISTORY_PATH }}

    - name: Prepare unified reports (for other artifacts)
      if: always()
      run: |
        # The 'Generate HTML Coverage Report' step already created and populated
        # unified-reports/coverage-report, so no need to copy from test-results anymore.
        # Just confirm its presence if it was successfully generated.
        if [ -d "unified-reports/coverage-report" ]; then
          echo "Coverage report HTML output found in unified-reports/coverage-report"
        else
          echo "Coverage report HTML output not found in unified-reports/coverage-report."
        fi

        # Copy TRX file to unified-reports
        if [ -f "test-results/all-tests.trx" ]; then
          cp test-results/all-tests.trx unified-reports/
          echo "Test results (TRX) copied to unified-reports"
        fi

        echo "=== Final Unified Reports Structure ==="
        ls -la unified-reports/ || echo "Unified reports directory is empty"

    - name: Upload unified test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: other-test-reports
        path: unified-reports/
        if-no-files-found: warn

    - name: Build production image
      if: success()
      run: |
        docker build --target final -t ${{ env.DOCKER_IMAGE_NAME }} .

    - name: Login to Docker Hub
      if: success() && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push to Docker Hub
      if: success() && github.ref == 'refs/heads/main'
      run: |
        docker tag ${{ env.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        docker tag ${{ env.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
